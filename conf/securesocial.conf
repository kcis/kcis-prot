#####################################################################################
#
# SlidePik Settings
#
#####################################################################################
securesocial {
	#providers="userpass,twitter,google,facebook"
	#
	# If enabled, sets the path to your copy of Bootstrap.css to be used instead of the default one provided by SecureSocial
	#
	#bootstrapCssPath="your path"
 

	#
	# If enabled, sets the Favicon to display when in SecureSocial pages
	#
	#faviconPath="your path"
  

	#
	# If enabled, sets the path to your copy of JQuery to be used instead of the default one provided by SecureSocial
	#
	#jqueryPath="your path"


	#
	# If enabled, injects this Css file into all SecureSocial pages, allowing for minor style customizations
	# If you want to do major changes, please read about custom templates in SecureSocial
	#
	#customCssPath="your path"

	#
	# Where to redirect the user if SecureSocial can't figure that out from
	# the request that led the use to the login page
	#
	onLoginGoTo=/

	#
	# Where to redirect the user when he logs out. If not set SecureSocial will redirect to the login page
	#
	onLogoutGoTo=/

	#
	# Where to redirect the user when he/she starts the signup process.
	# If not set SecureSocial will redirect to the login page
	#
	#onStartSignUpGoTo=/login

	#
	# Where to redirect the user when he/she signs up.
	# If not set SecureSocial will redirect to the login page
	#
	#onSignUpGoTo=/login

	#
	# Where to redirect the user when he starts the password reset process.
	# If not set SecureSocial will redirect to the login page
	#
	#onStartResetPasswordGoTo=/login

	#
	# Where to redirect the user when he resets his/her password.
	# If not set SecureSocial will redirect to the login page
	#
	#onResetPasswordGoTo=/login

	#
	# Where to redirect the user when he changes his/her password.
	# If not set SecureSocial will redirect to the password change page
	#
	#onPasswordChangeGoTo=/password

	#
	# Enable SSL for oauth callback urls, login/signup/password recovery pages and the authenticator cookie
	#
	ssl=false


	#
	# Parameters for the cookie used to track users. 
	#
	cookie {
		# 
		# The cookie name (defaults to 'id')
		name=slidepik

		#
		# The path for which the cookie should be sent by the browser (defaults to /)
		#
		#path=/

		#
		# The domain for which the cookie should be sent (it is left empty by default)
		#
		#domain=some_domain

		#
		# If set to true, the cookie is not readable by a client side script (defaults to true).
		#
		#httpOnly=true

		#
		# The amount of time the session id will remain valid since the last request
		#14400min=10days
		idleTimeoutInMinutes=14400

		#
		# The amount of time the session id will be valid since the user authenticated. 
		# After this the user will need to re-authenticate
		#
		absoluteTimeOutInMinutes=14400
		makeTransient=false
	}

	twitter {
		#https://dev.twitter.com/docs/auth/implementing-sign-twitter
		#get one's from here https://dev.twitter.com/apps/new
		requestTokenUrl="https://twitter.com/oauth/request_token"
		accessTokenUrl="https://twitter.com/oauth/access_token"
		authorizationUrl="https://twitter.com/oauth/authenticate"
		#api key
		consumerKey="ZarI90w0mObcG57JkAjw"
		#api secret
		consumerSecret="quxJbtC7SaiFhRTpGzAu9wDJG2wkG89gB9UtKKeo"
	}

	facebook {
		authorizationUrl="https://graph.facebook.com/oauth/authorize"
		accessTokenUrl="https://graph.facebook.com/oauth/access_token"
		clientId=547573418649001
		clientSecret=6fe1a8b8bfa0e34a7425818ea9d91aca
		# this scope is the minimum SecureSocial requires.  You can add more if required by your app.
		#scope=email
		scope="basic_info,email"
	}

	google {
		#go here https://console.developers.google.com/project
		#https://console.developers.google.com/project/apps~darzaar/apiui/credential
		authorizationUrl="https://accounts.google.com/o/oauth2/auth"
		accessTokenUrl="https://accounts.google.com/o/oauth2/token"
		clientId=78881229746.apps.googleusercontent.com
		clientSecret=OgVNFOxIrF8okEhF-pAaCN2z
		scope="https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email"
	}

	linkedin {
		requestTokenUrl="https://api.linkedin.com/uas/oauth/requestToken"
		accessTokenUrl="https://api.linkedin.com/uas/oauth/accessToken"
		authorizationUrl="https://api.linkedin.com/uas/oauth/authenticate"
		consumerKey=your_consumer_key
		consumerSecret=your_consumer_secret
	}

	github {
		authorizationUrl="https://github.com/login/oauth/authorize"
		accessTokenUrl="https://github.com/login/oauth/access_token"
		clientId=your_client_id
		clientSecret=your_client_secret
	}

	foursquare {
		authorizationUrl="https://foursquare.com/oauth2/authenticate"
		accessTokenUrl="https://foursquare.com/oauth2/access_token"
		clientId=your_client_id
		clientSecret=your_client_secret
	}

	xing {
		requestTokenUrl="https://api.xing.com/v1/request_token"
		accessTokenUrl="https://api.xing.com/v1/access_token"
		authorizationUrl="https://api.xing.com/v1/authorize"
		consumerKey=your_consumer_key
		consumerSecret=your_consumer_secret
	}

	instagram {
		authorizationUrl="https://api.instagram.com/oauth/authorize"
		accessTokenUrl="https://api.instagram.com/oauth/access_token"
		clientId=your_client_id
		clientSecret=your_client_secret
	}

	vk {
		authorizationUrl="http://oauth.vk.com/authorize"
		accessTokenUrl="https://oauth.vk.com/access_token"
		clientId=your_client_id
		clientSecret=your_client_secret
	}

	userpass {
		#
		# Enable username support, otherwise SecureSocial will use the emails as user names
		#
		withUserNameSupport=false
		sendWelcomeEmail=true
		enableGravatarSupport=true
		tokenDuration=60
		tokenDeleteInterval=5
		signupSkipLogin=false
	}
}
